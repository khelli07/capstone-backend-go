basePath: /
definitions:
  models.Event:
    properties:
      age_limit:
        type: integer
      capacity:
        type: integer
      categories:
        description: relational fields
        items:
          type: string
        type: array
      created_at:
        type: string
      description:
        type: string
      dress_code:
        type: string
      end_time:
        type: string
      id:
        type: string
      location:
        type: string
      name:
        type: string
      organizer:
        description: non-mandatory fields
        type: string
      participants:
        items:
          type: string
        type: array
      price:
        type: number
      start_time:
        type: string
      total_likes:
        type: integer
      updated_at:
        type: string
    type: object
  models.Review:
    properties:
      comment:
        type: string
      created_at:
        type: string
      event_id:
        type: string
      id:
        type: string
      rating:
        type: integer
      updated_at:
        type: string
      user_id:
        type: string
    type: object
  models.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: string
      joined_event:
        items:
          type: string
        type: array
      updated_at:
        type: string
      username:
        type: string
    type: object
  payload.CreateEventRequest:
    properties:
      age_limit:
        type: integer
      capacity:
        type: integer
      categories:
        items:
          type: string
        type: array
      description:
        type: string
      dress_code:
        type: string
      end_time:
        type: string
      location:
        type: string
      name:
        type: string
      organizer:
        type: string
      price:
        type: number
      start_time:
        type: string
    type: object
  payload.CreateResponse:
    properties:
      id:
        type: string
    type: object
  payload.CreateReviewRequest:
    properties:
      comment:
        type: string
      rating:
        type: integer
    type: object
  payload.GeneralResponse:
    properties:
      message:
        type: string
    type: object
  payload.GetEventsResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/models.Event'
        type: array
    type: object
  payload.GetReviewsResponse:
    properties:
      average_rating:
        type: number
      data:
        items:
          $ref: '#/definitions/models.Review'
        type: array
    type: object
  payload.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  payload.LoginResponse:
    properties:
      token:
        type: string
    type: object
  payload.RegisterRequest:
    properties:
      email:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  payload.UpdateEventRequest:
    properties:
      age_limit:
        type: integer
      capacity:
        type: integer
      categories:
        items:
          type: string
        type: array
      description:
        type: string
      dress_code:
        type: string
      end_time:
        type: string
      location:
        type: string
      name:
        type: string
      organizer:
        type: string
      price:
        type: number
      start_time:
        type: string
    type: object
  payload.UpdateUserRequest:
    properties:
      username:
        type: string
    type: object
host: localhost:9999
info:
  contact: {}
  description: A matchmaking service API in Go using Gin framework.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Match-Event Backend API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login
      parameters:
      - description: Login
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/payload.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/payload.LoginResponse'
      summary: Login
      tags:
      - users
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user
      parameters:
      - description: User
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/payload.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/payload.GeneralResponse'
      summary: Register a new user
      tags:
      - users
  /events:
    get:
      consumes:
      - application/json
      description: Get all events
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/payload.GetEventsResponse'
      summary: Get all events
      tags:
      - events
    post:
      consumes:
      - application/json
      description: Create an event
      parameters:
      - description: Event object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/payload.CreateEventRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/payload.CreateResponse'
      summary: Create an event
      tags:
      - events
  /events/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an event
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/payload.GeneralResponse'
      summary: Delete an event
      tags:
      - events
    get:
      consumes:
      - application/json
      description: Get an event by ID
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Event'
      summary: Get an event by ID
      tags:
      - events
    put:
      consumes:
      - application/json
      description: Update an event
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: string
      - description: Event
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/payload.UpdateEventRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/payload.GeneralResponse'
      summary: Update an event
      tags:
      - events
  /events/{id}/join:
    post:
      consumes:
      - application/json
      description: Join an event
      parameters:
      - description: With the bearer started
        in: header
        name: Authorization
        required: true
        type: string
      - description: Event ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/payload.GeneralResponse'
      summary: Join an event
      tags:
      - events
  /events/popular:
    get:
      consumes:
      - application/json
      description: Get popular events
      parameters:
      - description: Top K
        in: query
        name: topK
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/payload.GetEventsResponse'
      summary: Get popular events
      tags:
      - events
  /reviews/{event_id}:
    get:
      consumes:
      - application/json
      description: Get reviews of an event
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/payload.GetReviewsResponse'
      summary: Get reviews of an event
      tags:
      - reviews
    post:
      consumes:
      - application/json
      description: Create a review
      parameters:
      - description: With the bearer started
        in: header
        name: Authorization
        required: true
        type: string
      - description: Event ID
        in: path
        name: event_id
        required: true
        type: string
      - description: Review
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/payload.CreateReviewRequest'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/payload.CreateResponse'
      summary: Create a review
      tags:
      - reviews
  /reviews/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a review
      parameters:
      - description: With the bearer started
        in: header
        name: Authorization
        required: true
        type: string
      - description: Review ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/payload.GeneralResponse'
      summary: Delete a review
      tags:
      - reviews
  /users:
    get:
      consumes:
      - application/json
      description: Get user info
      parameters:
      - description: With the bearer started
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      summary: Get user info
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update a user
      parameters:
      - description: With the bearer started
        in: header
        name: Authorization
        required: true
        type: string
      - description: User
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/payload.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/payload.GeneralResponse'
      summary: Update a user
      tags:
      - users
  /users/{id}:
    get:
      consumes:
      - application/json
      description: Get user by id
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      summary: Get user by id
      tags:
      - users
swagger: "2.0"
